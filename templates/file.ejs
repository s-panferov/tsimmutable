import * as Immutable from 'immutable';

import {
    <% exportDeps.forEach(function(typeName) { -%>
        <%= typeName %>,
    <% }) -%>
} from './<%= importName %>';

export {
    <% exportDeps.forEach(function(typeName) { -%>
        <%= typeName %>,
    <% }) -%>
};

<% ifaces.forEach(function(iface) { -%>
    <%- include('model', { iface: iface, ifaceName: iface.name.text }) %>
<% }) -%>
<% if (emitRecords && emitEmptyRecords) { -%>
    export let allRecords = {
        <% ifaces.forEach(function(iface) { -%>
            <%= iface.name.text %><%= recordSuffix %>,
        <% }) -%>
    }
<% } -%>

export interface RecordClass<T extends Immutable.Map<string, void>> {
    new (): T;
    new (values: T): T;
}

export interface RecordCtor<R, T extends Immutable.Map<string, any>> {
    (defaultValues: T | R, name?: string): RecordClass<T>
}

function fromJSDefault(json: any) {
    if (Array.isArray(json)) {
        return (Immutable.Seq as any).Indexed(json).map(fromJSDefault).toList();
    }
    if (isPlainObj(json)) {
        return (Immutable.Seq as any).Keyed(json).map(fromJSDefault).toMap();
    }
    return json;
}

function isPlainObj(value: any) {
    return value && (value.constructor === Object || value.constructor === undefined);
}

<%- include('methods') %>
